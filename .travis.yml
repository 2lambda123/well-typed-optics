# This Travis job script has been generated by a script via
#
#   haskell-ci '--config=cabal.haskell-ci' 'cabal.project'
#
# For more information, see https://github.com/haskell-CI/haskell-ci
#
# version: 0.9.20191213
#
version: ~> 1.0
language: c
os: linux
dist: xenial
git:
  # whether to recursively clone submodules
  submodules: false
branches:
  only:
    - master
cache:
  directories:
    - $HOME/.cabal/packages
    - $HOME/.cabal/store
    - $HOME/.hlint
before_cache:
  - rm -fv $CABALHOME/packages/hackage.haskell.org/build-reports.log
  # remove files that are regenerated by 'cabal update'
  - rm -fv $CABALHOME/packages/hackage.haskell.org/00-index.*
  - rm -fv $CABALHOME/packages/hackage.haskell.org/*.json
  - rm -fv $CABALHOME/packages/hackage.haskell.org/01-index.cache
  - rm -fv $CABALHOME/packages/hackage.haskell.org/01-index.tar
  - rm -fv $CABALHOME/packages/hackage.haskell.org/01-index.tar.idx
  - rm -rfv $CABALHOME/packages/head.hackage
jobs:
  include:
    - compiler: ghcjs-8.4
      addons: {"apt":{"sources":[{"sourceline":"deb http://ppa.launchpad.net/hvr/ghc/ubuntu xenial main","key_url":"https://keyserver.ubuntu.com/pks/lookup?op=get&search=0x063dab2bdc0b3f9fcebc378bff3aeacef6f88286"},{"sourceline":"deb http://ppa.launchpad.net/hvr/ghcjs/ubuntu xenial main"},{"sourceline":"deb https://deb.nodesource.com/node_10.x xenial main","key_url":"https://deb.nodesource.com/gpgkey/nodesource.gpg.key"}],"packages":["ghcjs-8.4","cabal-install-3.0","ghc-8.4.4","nodejs"]}}
      os: linux
    - compiler: ghc-8.10.1
      addons: {"apt":{"sources":[{"sourceline":"deb http://ppa.launchpad.net/hvr/ghc/ubuntu xenial main","key_url":"https://keyserver.ubuntu.com/pks/lookup?op=get&search=0x063dab2bdc0b3f9fcebc378bff3aeacef6f88286"}],"packages":["ghc-8.10.1","cabal-install-3.0"]}}
      os: linux
    - compiler: ghc-8.8.1
      addons: {"apt":{"sources":[{"sourceline":"deb http://ppa.launchpad.net/hvr/ghc/ubuntu xenial main","key_url":"https://keyserver.ubuntu.com/pks/lookup?op=get&search=0x063dab2bdc0b3f9fcebc378bff3aeacef6f88286"}],"packages":["ghc-8.8.1","cabal-install-3.0"]}}
      os: linux
    - compiler: ghc-8.6.5
      addons: {"apt":{"sources":[{"sourceline":"deb http://ppa.launchpad.net/hvr/ghc/ubuntu xenial main","key_url":"https://keyserver.ubuntu.com/pks/lookup?op=get&search=0x063dab2bdc0b3f9fcebc378bff3aeacef6f88286"}],"packages":["ghc-8.6.5","cabal-install-3.0"]}}
      os: linux
    - compiler: ghc-8.4.4
      addons: {"apt":{"sources":[{"sourceline":"deb http://ppa.launchpad.net/hvr/ghc/ubuntu xenial main","key_url":"https://keyserver.ubuntu.com/pks/lookup?op=get&search=0x063dab2bdc0b3f9fcebc378bff3aeacef6f88286"}],"packages":["ghc-8.4.4","cabal-install-3.0"]}}
      os: linux
    - compiler: ghc-8.2.2
      addons: {"apt":{"sources":[{"sourceline":"deb http://ppa.launchpad.net/hvr/ghc/ubuntu xenial main","key_url":"https://keyserver.ubuntu.com/pks/lookup?op=get&search=0x063dab2bdc0b3f9fcebc378bff3aeacef6f88286"}],"packages":["ghc-8.2.2","cabal-install-3.0"]}}
      os: linux
    - compiler: ghc-8.0.2
      addons: {"apt":{"sources":[{"sourceline":"deb http://ppa.launchpad.net/hvr/ghc/ubuntu xenial main","key_url":"https://keyserver.ubuntu.com/pks/lookup?op=get&search=0x063dab2bdc0b3f9fcebc378bff3aeacef6f88286"}],"packages":["ghc-8.0.2","cabal-install-3.0"]}}
      os: linux
  allow_failures:
    - compiler: ghc-8.10.1
before_install:
  - |
    if echo $CC | grep -q ghcjs; then
        GHCJS=true;
    else
        GHCJS=false;
    fi
  - HC=$(echo "/opt/$CC/bin/ghc" | sed 's/-/\//')
  - WITHCOMPILER="-w $HC"
  - if $GHCJS ; then HC=${HC}js ; fi
  - if $GHCJS ; then WITHCOMPILER="--ghcjs ${WITHCOMPILER}js" ; fi
  - HADDOCK=$(echo "/opt/$CC/bin/haddock" | sed 's/-/\//')
  - if $GHCJS ; then PATH="/opt/ghc/8.4.4/bin:$PATH" ; fi
  - HCPKG="$HC-pkg"
  - unset CC
  - CABAL=/opt/ghc/bin/cabal
  - CABALHOME=$HOME/.cabal
  - export PATH="$CABALHOME/bin:$PATH"
  - TOP=$(pwd)
  - "HCNUMVER=$(${HC} --numeric-version|perl -ne '/^(\\d+)\\.(\\d+)\\.(\\d+)(\\.(\\d+))?$/; print(10000 * $1 + 100 * $2 + ($3 == 0 ? $5 != 1 : $3))')"
  - echo $HCNUMVER
  - CABAL="$CABAL -vnormal+nowrap+markoutput"
  - set -o pipefail
  - |
    echo 'function blue(s) { printf "\033[0;34m" s "\033[0m " }'           >> .colorful.awk
    echo 'BEGIN { state = "output"; }'                                     >> .colorful.awk
    echo '/^-----BEGIN CABAL OUTPUT-----$/ { state = "cabal" }'            >> .colorful.awk
    echo '/^-----END CABAL OUTPUT-----$/ { state = "output" }'             >> .colorful.awk
    echo '!/^(-----BEGIN CABAL OUTPUT-----|-----END CABAL OUTPUT-----)/ {' >> .colorful.awk
    echo '  if (state == "cabal") {'                                       >> .colorful.awk
    echo '    print blue($0)'                                              >> .colorful.awk
    echo '  } else {'                                                      >> .colorful.awk
    echo '    print $0'                                                    >> .colorful.awk
    echo '  }'                                                             >> .colorful.awk
    echo '}'                                                               >> .colorful.awk
  - cat .colorful.awk
  - |
    color_cabal_output () {
      awk -f $TOP/.colorful.awk
    }
  - echo text | color_cabal_output
install:
  - ${CABAL} --version
  - echo "$(${HC} --version) [$(${HC} --print-project-git-commit-id 2> /dev/null || echo '?')]"
  - node --version
  - echo $GHCJS
  - TEST=--enable-tests
  - BENCH=--enable-benchmarks
  - HEADHACKAGE=false
  - if ! $GHCJS && [ $HCNUMVER -ge 81000 ] ; then HEADHACKAGE=true ; fi
  - rm -f $CABALHOME/config
  - |
    echo "verbose: normal +nowrap +markoutput"                                  >> $CABALHOME/config
    echo "remote-build-reporting: anonymous"                                    >> $CABALHOME/config
    echo "write-ghc-environment-files: always"                                  >> $CABALHOME/config
    echo "remote-repo-cache: $CABALHOME/packages"                               >> $CABALHOME/config
    echo "logs-dir:          $CABALHOME/logs"                                   >> $CABALHOME/config
    echo "world-file:        $CABALHOME/world"                                  >> $CABALHOME/config
    echo "extra-prog-path:   $CABALHOME/bin"                                    >> $CABALHOME/config
    echo "symlink-bindir:    $CABALHOME/bin"                                    >> $CABALHOME/config
    echo "installdir:        $CABALHOME/bin"                                    >> $CABALHOME/config
    echo "build-summary:     $CABALHOME/logs/build.log"                         >> $CABALHOME/config
    echo "store-dir:         $CABALHOME/store"                                  >> $CABALHOME/config
    echo "install-dirs user"                                                    >> $CABALHOME/config
    echo "  prefix: $CABALHOME"                                                 >> $CABALHOME/config
    echo "repository hackage.haskell.org"                                       >> $CABALHOME/config
    echo "  url: http://hackage.haskell.org/"                                   >> $CABALHOME/config
    echo "  secure: True"                                                       >> $CABALHOME/config
    echo "  key-threshold: 3"                                                   >> $CABALHOME/config
    echo "  root-keys:"                                                         >> $CABALHOME/config
    echo "    fe331502606802feac15e514d9b9ea83fee8b6ffef71335479a2e68d84adc6b0" >> $CABALHOME/config
    echo "    1ea9ba32c526d1cc91ab5e5bd364ec5e9e8cb67179a471872f6e26f0ae773d42" >> $CABALHOME/config
    echo "    2c6c3627bd6c982990239487f1abd02e08a02e6cf16edb105a8012d444d870c3" >> $CABALHOME/config
    echo "    0a5c7ea47cd1b15f01f5f51a33adda7e655bc0f0b0615baa8e271f4c3351e21d" >> $CABALHOME/config
    echo "    51f0161b906011b52c6613376b1ae937670da69322113a246a09f807c62f6921" >> $CABALHOME/config
  - |
    if $HEADHACKAGE; then
    echo "allow-newer: $($HCPKG list --simple-output | sed -E 's/([a-zA-Z-]+)-[0-9.]+/*:\1/g')" >> $CABALHOME/config
    echo "repository head.hackage.ghc.haskell.org"                                        >> $CABALHOME/config
    echo "   url: https://ghc.gitlab.haskell.org/head.hackage/"                           >> $CABALHOME/config
    echo "   secure: True"                                                                >> $CABALHOME/config
    echo "   root-keys: 7541f32a4ccca4f97aea3b22f5e593ba2c0267546016b992dfadcd2fe944e55d" >> $CABALHOME/config
    echo "              26021a13b401500c8eb2761ca95c61f2d625bfef951b939a8124ed12ecf07329" >> $CABALHOME/config
    echo "              f76d08be13e9a61a377a85e2fb63f4c5435d40f8feb3e12eb05905edb8cdea89" >> $CABALHOME/config
    echo "   key-threshold: 3"                                                            >> $CABALHOME/config
    fi
  - |
    echo "program-default-options"                >> $CABALHOME/config
    echo "  ghc-options: $GHCJOBS +RTS -M6G -RTS" >> $CABALHOME/config
  - cat $CABALHOME/config
  - rm -fv cabal.project cabal.project.local cabal.project.freeze
  - travis_retry ${CABAL} v2-update -v
  - if ! $GHCJS ; then (cd /tmp && ${CABAL} v2-install $WITHCOMPILER -j2 doctest --constraint='doctest ==0.16.*' | color_cabal_output) ; fi
  # Generate cabal.project
  - rm -rf cabal.project cabal.project.local cabal.project.freeze
  - touch cabal.project
  - |
    echo "packages: optics" >> cabal.project
    echo "packages: optics-core" >> cabal.project
    echo "packages: optics-extra" >> cabal.project
    echo "packages: optics-sop" >> cabal.project
    echo "packages: optics-th" >> cabal.project
    echo "packages: optics-vl" >> cabal.project
    echo "packages: indexed-profunctors" >> cabal.project
    if $GHCJS || ! $GHCJS && [ $HCNUMVER -lt 81000 ] ; then echo "packages: template-haskell-optics" >> cabal.project ; fi
    if ! $GHCJS ; then echo "packages: metametapost" >> cabal.project ; fi
  - |
  - "for pkg in $($HCPKG list --simple-output); do echo $pkg | sed 's/-[^-]*$//' | (grep -vE -- '^(indexed-profunctors|metametapost|optics|optics-core|optics-extra|optics-sop|optics-th|optics-vl|template-haskell-optics)$' || true) | sed 's/^/constraints: /' | sed 's/$/ installed/' >> cabal.project.local; done"
  - cat cabal.project || true
  - cat cabal.project.local || true
  - if [ -f "optics/configure.ac" ]; then (cd "optics" && autoreconf -i); fi
  - if [ -f "optics-core/configure.ac" ]; then (cd "optics-core" && autoreconf -i); fi
  - if [ -f "optics-extra/configure.ac" ]; then (cd "optics-extra" && autoreconf -i); fi
  - if [ -f "optics-sop/configure.ac" ]; then (cd "optics-sop" && autoreconf -i); fi
  - if [ -f "optics-th/configure.ac" ]; then (cd "optics-th" && autoreconf -i); fi
  - if [ -f "optics-vl/configure.ac" ]; then (cd "optics-vl" && autoreconf -i); fi
  - if [ -f "indexed-profunctors/configure.ac" ]; then (cd "indexed-profunctors" && autoreconf -i); fi
  - if [ -f "template-haskell-optics/configure.ac" ]; then (cd "template-haskell-optics" && autoreconf -i); fi
  - if [ -f "metametapost/configure.ac" ]; then (cd "metametapost" && autoreconf -i); fi
  - ${CABAL} v2-freeze $WITHCOMPILER ${TEST} ${BENCH} | color_cabal_output
  - "cat cabal.project.freeze | sed -E 's/^(constraints: *| *)//' | sed 's/any.//'"
  - rm  cabal.project.freeze
  - ${CABAL} v2-build $WITHCOMPILER ${TEST} ${BENCH} --dep -j2 all | color_cabal_output
  - ${CABAL} v2-build $WITHCOMPILER --disable-tests --disable-benchmarks --dep -j2 all | color_cabal_output
script:
  - DISTDIR=$(mktemp -d /tmp/dist-test.XXXX)
  # Packaging...
  - ${CABAL} v2-sdist all | color_cabal_output
  # Unpacking...
  - mv dist-newstyle/sdist/*.tar.gz ${DISTDIR}/
  - cd ${DISTDIR} || false
  - find . -maxdepth 1 -type f -name '*.tar.gz' -exec tar -xvf '{}' \;
  - find . -maxdepth 1 -type f -name '*.tar.gz' -exec rm       '{}' \;
  - PKGDIR_optics="$(find . -maxdepth 1 -type d -regex '.*/optics-[0-9.]*')"
  - PKGDIR_optics_core="$(find . -maxdepth 1 -type d -regex '.*/optics-core-[0-9.]*')"
  - PKGDIR_optics_extra="$(find . -maxdepth 1 -type d -regex '.*/optics-extra-[0-9.]*')"
  - PKGDIR_optics_sop="$(find . -maxdepth 1 -type d -regex '.*/optics-sop-[0-9.]*')"
  - PKGDIR_optics_th="$(find . -maxdepth 1 -type d -regex '.*/optics-th-[0-9.]*')"
  - PKGDIR_optics_vl="$(find . -maxdepth 1 -type d -regex '.*/optics-vl-[0-9.]*')"
  - PKGDIR_indexed_profunctors="$(find . -maxdepth 1 -type d -regex '.*/indexed-profunctors-[0-9.]*')"
  - PKGDIR_template_haskell_optics="$(find . -maxdepth 1 -type d -regex '.*/template-haskell-optics-[0-9.]*')"
  - PKGDIR_metametapost="$(find . -maxdepth 1 -type d -regex '.*/metametapost-[0-9.]*')"
  # Generate cabal.project
  - rm -rf cabal.project cabal.project.local cabal.project.freeze
  - touch cabal.project
  - |
    echo "packages: ${PKGDIR_optics}" >> cabal.project
    echo "packages: ${PKGDIR_optics_core}" >> cabal.project
    echo "packages: ${PKGDIR_optics_extra}" >> cabal.project
    echo "packages: ${PKGDIR_optics_sop}" >> cabal.project
    echo "packages: ${PKGDIR_optics_th}" >> cabal.project
    echo "packages: ${PKGDIR_optics_vl}" >> cabal.project
    echo "packages: ${PKGDIR_indexed_profunctors}" >> cabal.project
    if $GHCJS || ! $GHCJS && [ $HCNUMVER -lt 81000 ] ; then echo "packages: ${PKGDIR_template_haskell_optics}" >> cabal.project ; fi
    if ! $GHCJS ; then echo "packages: ${PKGDIR_metametapost}" >> cabal.project ; fi
  - |
  - "for pkg in $($HCPKG list --simple-output); do echo $pkg | sed 's/-[^-]*$//' | (grep -vE -- '^(indexed-profunctors|metametapost|optics|optics-core|optics-extra|optics-sop|optics-th|optics-vl|template-haskell-optics)$' || true) | sed 's/^/constraints: /' | sed 's/$/ installed/' >> cabal.project.local; done"
  - cat cabal.project || true
  - cat cabal.project.local || true
  # Building...
  # this builds all libraries and executables (without tests/benchmarks)
  - ${CABAL} v2-build $WITHCOMPILER --disable-tests --disable-benchmarks all | color_cabal_output
  # Building with tests and benchmarks...
  # build & run tests, build benchmarks
  - ${CABAL} v2-build $WITHCOMPILER ${TEST} ${BENCH} all | color_cabal_output
  # Testing...
  - if ! $GHCJS ; then ${CABAL} v2-test $WITHCOMPILER ${TEST} ${BENCH} all | color_cabal_output ; fi
  # Doctest...
  - if ! $GHCJS ; then (cd ${PKGDIR_optics} && doctest  src) ; fi
  - if ! $GHCJS ; then (cd ${PKGDIR_optics_core} && doctest  -XBangPatterns -XDefaultSignatures -XDeriveFunctor -XFlexibleContexts -XFlexibleInstances -XFunctionalDependencies -XGADTs -XInstanceSigs -XLambdaCase -XMultiParamTypeClasses -XRankNTypes -XScopedTypeVariables -XTupleSections -XTypeApplications -XTypeFamilies -XTypeOperators src) ; fi
  - if ! $GHCJS ; then (cd ${PKGDIR_optics_extra} && doctest  -XBangPatterns -XDefaultSignatures -XDeriveFunctor -XFlexibleContexts -XFlexibleInstances -XFunctionalDependencies -XGADTs -XInstanceSigs -XLambdaCase -XMultiParamTypeClasses -XRankNTypes -XScopedTypeVariables -XTupleSections -XTypeApplications -XTypeFamilies -XTypeOperators src) ; fi
  - if ! $GHCJS ; then (cd ${PKGDIR_optics_sop} && doctest  src) ; fi
  - if ! $GHCJS ; then (cd ${PKGDIR_optics_th} && doctest  src) ; fi
  - if ! $GHCJS ; then (cd ${PKGDIR_optics_vl} && doctest  src) ; fi
  - if ! $GHCJS ; then (cd ${PKGDIR_indexed_profunctors} && doctest  src) ; fi
  - if ! $GHCJS && [ $HCNUMVER -lt 81000 ] ; then (cd ${PKGDIR_template_haskell_optics} && doctest  src) ; fi
  # cabal check...
  - (cd ${PKGDIR_optics} && ${CABAL} -vnormal check)
  - (cd ${PKGDIR_optics_core} && ${CABAL} -vnormal check)
  - (cd ${PKGDIR_optics_extra} && ${CABAL} -vnormal check)
  - (cd ${PKGDIR_optics_sop} && ${CABAL} -vnormal check)
  - (cd ${PKGDIR_optics_th} && ${CABAL} -vnormal check)
  - (cd ${PKGDIR_optics_vl} && ${CABAL} -vnormal check)
  - (cd ${PKGDIR_indexed_profunctors} && ${CABAL} -vnormal check)
  - if $GHCJS || ! $GHCJS && [ $HCNUMVER -lt 81000 ] ; then (cd ${PKGDIR_template_haskell_optics} && ${CABAL} -vnormal check) ; fi
  - if ! $GHCJS ; then (cd ${PKGDIR_metametapost} && ${CABAL} -vnormal check) ; fi
  # haddock...
  - if ! $GHCJS ; then ${CABAL} v2-haddock $WITHCOMPILER --with-haddock $HADDOCK ${TEST} ${BENCH} all | color_cabal_output ; fi
  # Building without installed constraints for packages in global-db...
  - rm -f cabal.project.local
  - ${CABAL} v2-build $WITHCOMPILER --disable-tests --disable-benchmarks all | color_cabal_output

# REGENDATA ("0.9.20191213",["--config=cabal.haskell-ci","cabal.project"])
# EOF
