name:          optics-core
version:       0.1
license:       BSD3
license-file:  LICENSE
build-type:    Simple
cabal-version: 1.24
maintainer:    oleg@well-typed.com
author:        Edward Kmett, Adam Gundry, Andres LÃ¶h, Andrzej Rybczak, Oleg Grenrus
tested-with:   ghc ==8.0.2 ghc ==8.2.2 ghc ==8.4.4 ghc ==8.6.3
synopsis:      Optics as an abstract interface: core definitions
category:      Data, Optics, Lenses, Generics
description:
  This package provides core definitions with a minimal dependency footprint.
  See @optics@ package (and its dependencies) for documentation and
  "batteries-included" variant.

library
  default-language:   Haskell2010
  hs-source-dirs:     src
  build-depends:      base >=4.9 && <5

  -- base *WithIndex instances
  build-depends:
      array         >=0.5.1.1 && <0.6
    , containers    >=0.5.7.1 && <0.7

  ghc-options:        -Wall

  -- main module to land with repl
  exposed-modules: Optics.Core

  exposed-modules:
    Optics.AffineFold
    Optics.AffineTraversal
    Optics.Arrow
    Optics.Coerce
    Optics.Equality
    Optics.Fold
    Optics.Getter
    Optics.Indexed.Core
    Optics.Iso
    Optics.IxFold
    Optics.IxSetter
    Optics.IxTraversal
    Optics.Lens
    Optics.LensyReview
    Optics.Operators
    Optics.Optic
    Optics.Prism
    Optics.PrismaticGetter
    Optics.Re
    Optics.Review
    Optics.Setter
    Optics.Traversal
    Data.Either.Optics
    Data.Maybe.Optics
    Data.Tuple.Optics

    -- internal modules
    Optics.Internal.Bi
    Optics.Internal.Concrete
    Optics.Internal.Fold
    Optics.Internal.Indexed
    Optics.Internal.IxFold
    Optics.Internal.IxSetter
    Optics.Internal.IxTraversal
    Optics.Internal.Optic
    Optics.Internal.Optic.Subtyping
    Optics.Internal.Optic.TypeLevel
    Optics.Internal.Optic.Types
    Optics.Internal.Profunctor
    Optics.Internal.Re
    Optics.Internal.Setter
    Optics.Internal.Tagged
    Optics.Internal.Traversal
    Optics.Internal.Utils

  default-extensions:
    BangPatterns
    DefaultSignatures
    DeriveFunctor
    FlexibleContexts
    FlexibleInstances
    FunctionalDependencies
    GADTs
    InstanceSigs
    LambdaCase
    MultiParamTypeClasses
    RankNTypes
    ScopedTypeVariables
    TupleSections
    TypeApplications
    TypeFamilies
    TypeOperators
